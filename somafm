#!/usr/bin/perl -w
# somafm - A somafm command line client
# Copyright (C) 2017  David Moreno
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

binmode(STDOUT, ":utf8");
use utf8;
use strict;
use File::Basename;
use Getopt::Long;
use LWP::Simple;
use IPC::Open3;
use IO::Select;
use POSIX;
use constant {
	URL => "http://somafm.com/",
	STATION_DIR => $ENV{HOME} ."/.config/somafm",
	BIN => "mplayer",
	TIMEOUT => 5,

	#Error codes
	ERROR_OK => 0,
	ERROR_LIST => 1,
	ERROR_STATIONS => 2,
	ERROR_GETLIST => 3,
	ERROR_UNKNOWN => 4,

	VERSION => "1.2"
};

#---------------------------------------
# Globals
#---------------------------------------
our $program_name = fileparse($0);

our $arg = {
	help => 0,
	update => 0,
	list => 0,
	version => 0
};

our $stat = {
	name => undef,
	desc => undef,
	pls => undef
};

our $mplayer = {
	sel => undef,
	pid => undef,
	in => undef,
	out => undef,
	err => undef
};

sub help {
	my $msg = "$program_name - Plays somafm stations using mplayer\n".
	"Usage: $program_name [OPTION] STATION\n\n".
	"  -u, --update    Downloads the station list\n".
	"  -l, --list      Displays the available stations\n".
	"  -h, --help      Shows this message\n".
	"  -v, --version   Shows program version".
	"\nNot sure what to listen? Try 'random' as STATION\n";

	print "$msg";
}

# Determines if a given directory is empty
sub empty_dir {
	my $dir = shift;
	my $num = 0;

	if (not -d $dir) { return 1; }

	opendir(DIR, $dir);
	my @files = readdir(DIR);
	if (not @files) { return 1; }

	foreach my $f (@files) {
		if (not $f =~ /^[\.]*$/) { $num++; }
	}
	closedir(DIR);

	if ($num < 1) { return 1; }
	return 0;
}

# Returns the contents of a given dir
sub get_dir {
	my $dir = shift;

	if (not -d $dir) { return; }

	opendir(DIR, $dir);
	my @files = readdir(DIR);
	if (not @files) {
		closedir(DIR);
		return;
	}

	closedir(DIR);

	my @res;
	foreach my $f (@files) {
		if (not $f =~ /^[\.]*$/) { push(@res, $f); }
	}

	return @res;
}

# Obtains the name and the description of a given
# station playlist
sub get_station_data {
	my $pls = $stat->{pls};
	my ($name) = $pls =~ /.*\/(.*)/;
	($name) = $name =~ /(.*)\.[^.]+$/;
	$stat->{name} = $name;
	$stat->{desc} = `grep 'Title1' $pls |cut -d':' -f3`;
}

# Returns a playlist
sub get_pls {
	my ($random) = shift;
	my @list = get_dir(STATION_DIR);

	if ($random) {
		$stat->{pls} = STATION_DIR ."/". $list[rand(@list)];
		goto PLS_OK;
	}

	my $station = $ARGV[0] .".pls";
	if (not grep(/$station/, @list)) { return 0; }

	$stat->{pls} = STATION_DIR ."/$station";
PLS_OK:
	get_station_data();
	return 1;
}

# Creates the station storing directory
sub mk_station_dir {
	if (not -d STATION_DIR) {
		mkdir(STATION_DIR);
	}
}

# Downloads the station list
sub update {
	my @list = get_list_remote();
	if (not @list) {
		print "ERROR: Cannot get the station list\n";
		exit(ERROR_LIST);
	}

	mk_station_dir();

	foreach my $l (@list) {
		my ($station) = $l =~ /.*\/(.*)/;
		my $path = STATION_DIR . "/$station";
		print "- GETing $path\n";
		getstore($l, $path);
	}

	print "* Update done\n";
}

# Returns an array with the available stations
sub get_list_remote {
	my $html = get(URL);
	if (not $html) { return; }

	my @content = split("\n", $html);
	my @station = grep(/^<a href.* >$/, @content);
	if (not @station) { return; }

	for (my $i=0; $i < @station; $i++) {
		my ($s) = $station[$i] =~ /\/(.*?)\//;
		$station[$i] = URL ."$s.pls";
	}

	return @station;
}

# Displays the founded stations list
sub list {
	if (not -d STATION_DIR or empty_dir(STATION_DIR)) {
		my $msg = "ERROR: No stations founded\n".
			"Use: $program_name --update\n";
		print "$msg\n";
		exit(ERROR_STATIONS);
	}

	my @files = get_dir(STATION_DIR);
	if (not @files) {
		print "ERROR: Cannot get the station list\n";
		exit(ERROR_GETLIST);
	}

	print "* Available stations:\n\n";
	foreach my $f (@files) {
		my $path = STATION_DIR ."/$f";
		my $desc = `grep 'Title1' $path |cut -d':' -f3`;
		my ($s) = $f =~ /(.*)\..*/;
		print "  $s --$desc";
	}
	print "\n";
}

# Argument handling
sub arguments {
	if ($#ARGV < 0) {
		help();
		exit(ERROR_OK);
	}

	GetOptions(
		'help+' => \$arg->{help},
		'update+' => \$arg->{update},
		'list+' => \$arg->{list},
		'version' => \$arg->{version}
	);

	if ($arg->{help}) {
		help();
		exit(ERROR_OK);
	}

	if ($arg->{update}) {
		update();
		exit(ERROR_OK);
	}

	if ($arg->{list}) {
		list();
		exit(ERROR_OK);
	}

	if ($arg->{version}) {
		print "$program_name, version ". VERSION ."\n";
		exit(ERROR_OK);
	}
}

# We are online?
sub online {
	my $code = system("ping -c2 -n -q 8.8.8.8 &> /dev/null");
	return ($code != 0) ? 0 : 1;
}

# Determines if the child process is still running
sub child_alive {
	my $pid = $mplayer->{pid};
	my $res = waitpid($pid, WNOHANG);
	return ($res < 0) ? 0 : 1;
}

# Runs a mplayer new process
sub spawn {
	my $cmd = shift;
	$mplayer->{pid} = open3($mplayer->{in}, $mplayer->{out}, $mplayer->{err}, $cmd);
	$mplayer->{sel} = IO::Select->new();
	$mplayer->{sel}->add($mplayer->{out});
}

# Extracts the current song title
sub print_title {
	my $sel = $mplayer->{sel};
	my @ready = $sel->can_read();

	if (@ready) {
		foreach my $r (@ready) {
			my $input = <$r>;
			if (not $input) { return; }
			if ($input =~ /^ICY/) {
				my @tok = split("'", $input);
				print "$tok[1]\n";
			}
		}
	}
}

# SIGINT handler
sub sigint {
	kill('INT', $mplayer->{pid});
	wait();
	print "\b\b  \n* Stop: $stat->{name}\n";
	exit;
}

########################################
# BEGIN
########################################

arguments();

if (not -d STATION_DIR or empty_dir(STATION_DIR)) {
	my $msg = "ERROR: No stations founded\n".
		"Use: $program_name --update\n";
	print "$msg\n";
	exit(ERROR_STATIONS);
}

get_pls($ARGV[0] eq "random");
if (not $stat->{pls}) {
	print "ERROR: Unknown station\n";
	exit(ERROR_UNKNOWN);
}

my $cmd = BIN ." -playlist $stat->{pls}";
spawn($cmd);
$SIG{'INT'} = \&sigint;
$SIG{'QUIT'} = \&sigint;
$SIG{'KILL'} = \&sigint;
$| = 1;

my $banner = "* Play: $stat->{name}\n".
" $stat->{desc}".
"  Press 'CTRL+C' to exit\n\n";
print "$banner";

while (1) {
	if (not child_alive()) {
		while (not online()) { sleep(TIMEOUT); }
		spawn($cmd);
	}
	print_title();
}
